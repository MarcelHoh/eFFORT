#!/usr/bin/python

from numpy import sqrt, abs, conj, dot, pi


# NP-FF Tensor
def NPFFTensor(WCs, FFs):
    # Wilson Coeffs (can be complex!)
    SM, qSLlSL, qSRlSL, qVLlVL, qVRlVL, qTLlTL, qSLlSR, qSRlSR, qVLlVR, qVRlVR, qTRlTR = WCs
    SMc, qSLlSLc, qSRlSLc, qVLlVLc, qVRlVLc, qTLlTLc, qSLlSRc, qSRlSRc, qVLlVRc, qVRlVRc, qTRlTRc = conj(WCs)

    # FFs (assumed real)
    AP, FV, A0, A1, A12, T1, T2, T23 = FFs

    res = [FV ** 2 * SM * SMc,
           FV ** 2 * qVRlVLc * SM,
           FV ** 2 * qVLlVLc * SM,
           -(FV * qTLlTLc * SM * T1),
           A0 ** 2 * SM * SMc,
           -(A0 * AP * qSLlSLc * SM),
           -(A0 * AP * qSRlSLc * SM),
           A0 ** 2 * qVRlVLc * SM,
           A0 ** 2 * qVLlVLc * SM,
           A1 ** 2 * SM * SMc,
           A1 ** 2 * qVRlVLc * SM,
           A1 ** 2 * qVLlVLc * SM,
           -(A1 * qTLlTLc * SM * T2),
           A12 ** 2 * SM * SMc,
           A12 ** 2 * qVRlVLc * SM,
           A12 ** 2 * qVLlVLc * SM,
           -(A12 * qTLlTLc * SM * T23),
           -(A0 * AP * qSLlSL * SMc),
           AP ** 2 * qSLlSL * qSLlSLc,
           AP ** 2 * qSLlSL * qSRlSLc,
           -(A0 * AP * qSLlSL * qVRlVLc),
           -(A0 * AP * qSLlSL * qVLlVLc),
           AP ** 2 * qSLlSR * qSLlSRc,
           AP ** 2 * qSLlSR * qSRlSRc,
           -(A0 * AP * qSLlSR * qVRlVRc),
           -(A0 * AP * qSLlSR * qVLlVRc),
           -(A0 * AP * qSRlSL * SMc),
           AP ** 2 * qSLlSLc * qSRlSL,
           AP ** 2 * qSRlSL * qSRlSLc,
           -(A0 * AP * qSRlSL * qVRlVLc),
           -(A0 * AP * qSRlSL * qVLlVLc),
           AP ** 2 * qSLlSRc * qSRlSR,
           AP ** 2 * qSRlSR * qSRlSRc,
           -(A0 * AP * qSRlSR * qVRlVRc),
           -(A0 * AP * qSRlSR * qVLlVRc),
           FV ** 2 * qVRlVL * SMc,
           FV ** 2 * qVRlVL * qVRlVLc,
           FV ** 2 * qVLlVLc * qVRlVL,
           -(FV * qTLlTLc * qVRlVL * T1),
           A0 ** 2 * qVRlVL * SMc,
           -(A0 * AP * qSLlSLc * qVRlVL),
           -(A0 * AP * qSRlSLc * qVRlVL),
           A0 ** 2 * qVRlVL * qVRlVLc,
           A0 ** 2 * qVLlVLc * qVRlVL,
           A1 ** 2 * qVRlVL * SMc,
           A1 ** 2 * qVRlVL * qVRlVLc,
           A1 ** 2 * qVLlVLc * qVRlVL,
           -(A1 * qTLlTLc * qVRlVL * T2),
           A12 ** 2 * qVRlVL * SMc,
           A12 ** 2 * qVRlVL * qVRlVLc,
           A12 ** 2 * qVLlVLc * qVRlVL,
           -(A12 * qTLlTLc * qVRlVL * T23),
           FV ** 2 * qVRlVR * qVRlVRc,
           FV ** 2 * qVLlVRc * qVRlVR,
           -(FV * qTRlTRc * qVRlVR * T1),
           -(A0 * AP * qSLlSRc * qVRlVR),
           -(A0 * AP * qSRlSRc * qVRlVR),
           A0 ** 2 * qVRlVR * qVRlVRc,
           A0 ** 2 * qVLlVRc * qVRlVR,
           A1 ** 2 * qVRlVR * qVRlVRc,
           A1 ** 2 * qVLlVRc * qVRlVR,
           -(A1 * qTRlTRc * qVRlVR * T2),
           A12 ** 2 * qVRlVR * qVRlVRc,
           A12 ** 2 * qVLlVRc * qVRlVR,
           -(A12 * qTRlTRc * qVRlVR * T23),
           FV ** 2 * qVLlVL * SMc,
           FV ** 2 * qVLlVL * qVRlVLc,
           FV ** 2 * qVLlVL * qVLlVLc,
           -(FV * qTLlTLc * qVLlVL * T1),
           A0 ** 2 * qVLlVL * SMc,
           -(A0 * AP * qSLlSLc * qVLlVL),
           -(A0 * AP * qSRlSLc * qVLlVL),
           A0 ** 2 * qVLlVL * qVRlVLc,
           A0 ** 2 * qVLlVL * qVLlVLc,
           A1 ** 2 * qVLlVL * SMc,
           A1 ** 2 * qVLlVL * qVRlVLc,
           A1 ** 2 * qVLlVL * qVLlVLc,
           -(A1 * qTLlTLc * qVLlVL * T2),
           A12 ** 2 * qVLlVL * SMc,
           A12 ** 2 * qVLlVL * qVRlVLc,
           A12 ** 2 * qVLlVL * qVLlVLc,
           -(A12 * qTLlTLc * qVLlVL * T23),
           FV ** 2 * qVLlVR * qVRlVRc,
           FV ** 2 * qVLlVR * qVLlVRc,
           -(FV * qTRlTRc * qVLlVR * T1),
           -(A0 * AP * qSLlSRc * qVLlVR),
           -(A0 * AP * qSRlSRc * qVLlVR),
           A0 ** 2 * qVLlVR * qVRlVRc,
           A0 ** 2 * qVLlVR * qVLlVRc,
           A1 ** 2 * qVLlVR * qVRlVRc,
           A1 ** 2 * qVLlVR * qVLlVRc,
           -(A1 * qTRlTRc * qVLlVR * T2),
           A12 ** 2 * qVLlVR * qVRlVRc,
           A12 ** 2 * qVLlVR * qVLlVRc,
           -(A12 * qTRlTRc * qVLlVR * T23),
           -(FV * qTLlTL * SMc * T1),
           -(FV * qTLlTL * qVRlVLc * T1),
           -(FV * qTLlTL * qVLlVLc * T1),
           qTLlTL * qTLlTLc * T1 ** 2,
           -(A1 * qTLlTL * SMc * T2),
           -(A1 * qTLlTL * qVRlVLc * T2),
           -(A1 * qTLlTL * qVLlVLc * T2),
           qTLlTL * qTLlTLc * T2 ** 2,
           -(A12 * qTLlTL * SMc * T23),
           -(A12 * qTLlTL * qVRlVLc * T23),
           -(A12 * qTLlTL * qVLlVLc * T23),
           qTLlTL * qTLlTLc * T23 ** 2,
           -(FV * qTRlTR * qVRlVRc * T1),
           -(FV * qTRlTR * qVLlVRc * T1),
           qTRlTR * qTRlTRc * T1 ** 2,
           -(A1 * qTRlTR * qVRlVRc * T2),
           -(A1 * qTRlTR * qVLlVRc * T2),
           qTRlTR * qTRlTRc * T2 ** 2,
           -(A12 * qTRlTR * qVRlVRc * T23),
           -(A12 * qTRlTR * qVLlVRc * T23),
           qTRlTR * qTRlTRc * T23 ** 2]
    return res


def rateTensor(Mb, Mr, Mt, q2):
    # Definitions
    Mb2 = Mb * Mb
    Mc = Mr
    Mc2 = Mr * Mr
    MbplMc2 = (Mb + Mr) * (Mb + Mr)
    Mt2 = Mt * Mt
    Sqq = q2
    Sqq2 = q2 * q2
    Ew = (Mb2 - Mc2 + Sqq) / (2 * Mb)
    Pw2 = Ew * Ew - Sqq
    Pw = sqrt(Pw2)
    GF = 1.1663787e-5

    res = [(8 * Mb2 * Pw2 * (Mt2 + 2 * Sqq)) / (3. * MbplMc2 * Sqq),
           (8 * Mb2 * Pw2 * (Mt2 + 2 * Sqq)) / (3. * MbplMc2 * Sqq),
           (8 * Mb2 * Pw2 * (Mt2 + 2 * Sqq)) / (3. * MbplMc2 * Sqq),
           (-32 * Mb2 * Mt * Pw2) / ((Mb + Mc) * Sqq),
           (4 * Mb2 * Mt2 * Pw2) / Sqq2,
           (-2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (-4 * Mb2 * Mt2 * Pw2) / Sqq2,
           (4 * Mb2 * Mt2 * Pw2) / Sqq2,
           (2 * MbplMc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq),
           (-2 * MbplMc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq),
           (2 * MbplMc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq),
           (-8 * (Mb - Mc) * MbplMc2 * Mt) / Sqq,
           (64 * Mb2 * Mc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq2),
           (-64 * Mb2 * Mc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq2),
           (64 * Mb2 * Mc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq2),
           (-128 * Mb2 * Mc2 * Mt) / ((Mb + Mc) * Sqq),
           (-2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (Mb2 * Pw2) / Mc2,
           -((Mb2 * Pw2) / Mc2),
           (2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (-2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (Mb2 * Pw2) / Mc2,
           -((Mb2 * Pw2) / Mc2),
           (2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (-2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           -((Mb2 * Pw2) / Mc2),
           (Mb2 * Pw2) / Mc2,
           (-2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           -((Mb2 * Pw2) / Mc2),
           (Mb2 * Pw2) / Mc2,
           (-2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (8 * Mb2 * Pw2 * (Mt2 + 2 * Sqq)) / (3. * MbplMc2 * Sqq),
           (8 * Mb2 * Pw2 * (Mt2 + 2 * Sqq)) / (3. * MbplMc2 * Sqq),
           (8 * Mb2 * Pw2 * (Mt2 + 2 * Sqq)) / (3. * MbplMc2 * Sqq),
           (-32 * Mb2 * Mt * Pw2) / ((Mb + Mc) * Sqq),
           (-4 * Mb2 * Mt2 * Pw2) / Sqq2,
           (2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (-2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (4 * Mb2 * Mt2 * Pw2) / Sqq2,
           (-4 * Mb2 * Mt2 * Pw2) / Sqq2,
           (-2 * MbplMc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq),
           (2 * MbplMc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq),
           (-2 * MbplMc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq),
           (8 * (Mb - Mc) * MbplMc2 * Mt) / Sqq,
           (-64 * Mb2 * Mc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq2),
           (64 * Mb2 * Mc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq2),
           (-64 * Mb2 * Mc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq2),
           (128 * Mb2 * Mc2 * Mt) / ((Mb + Mc) * Sqq),
           (8 * Mb2 * Pw2 * (Mt2 + 2 * Sqq)) / (3. * MbplMc2 * Sqq),
           (8 * Mb2 * Pw2 * (Mt2 + 2 * Sqq)) / (3. * MbplMc2 * Sqq),
           (-32 * Mb2 * Mt * Pw2) / ((Mb + Mc) * Sqq),
           (2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (-2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (4 * Mb2 * Mt2 * Pw2) / Sqq2,
           (-4 * Mb2 * Mt2 * Pw2) / Sqq2,
           (2 * MbplMc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq),
           (-2 * MbplMc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq),
           (-8 * (Mb - Mc) * MbplMc2 * Mt) / Sqq,
           (64 * Mb2 * Mc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq2),
           (-64 * Mb2 * Mc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq2),
           (-128 * Mb2 * Mc2 * Mt) / ((Mb + Mc) * Sqq),
           (8 * Mb2 * Pw2 * (Mt2 + 2 * Sqq)) / (3. * MbplMc2 * Sqq),
           (8 * Mb2 * Pw2 * (Mt2 + 2 * Sqq)) / (3. * MbplMc2 * Sqq),
           (8 * Mb2 * Pw2 * (Mt2 + 2 * Sqq)) / (3. * MbplMc2 * Sqq),
           (-32 * Mb2 * Mt * Pw2) / ((Mb + Mc) * Sqq),
           (4 * Mb2 * Mt2 * Pw2) / Sqq2,
           (-2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (-4 * Mb2 * Mt2 * Pw2) / Sqq2,
           (4 * Mb2 * Mt2 * Pw2) / Sqq2,
           (2 * MbplMc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq),
           (-2 * MbplMc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq),
           (2 * MbplMc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq),
           (-8 * (Mb - Mc) * MbplMc2 * Mt) / Sqq,
           (64 * Mb2 * Mc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq2),
           (-64 * Mb2 * Mc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq2),
           (64 * Mb2 * Mc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq2),
           (-128 * Mb2 * Mc2 * Mt) / ((Mb + Mc) * Sqq),
           (8 * Mb2 * Pw2 * (Mt2 + 2 * Sqq)) / (3. * MbplMc2 * Sqq),
           (8 * Mb2 * Pw2 * (Mt2 + 2 * Sqq)) / (3. * MbplMc2 * Sqq),
           (-32 * Mb2 * Mt * Pw2) / ((Mb + Mc) * Sqq),
           (-2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (2 * Mb2 * Mt * Pw2) / (Mc * Sqq),
           (-4 * Mb2 * Mt2 * Pw2) / Sqq2,
           (4 * Mb2 * Mt2 * Pw2) / Sqq2,
           (-2 * MbplMc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq),
           (2 * MbplMc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq),
           (8 * (Mb - Mc) * MbplMc2 * Mt) / Sqq,
           (-64 * Mb2 * Mc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq2),
           (64 * Mb2 * Mc2 * (Mt2 + 2 * Sqq)) / (3. * Sqq2),
           (128 * Mb2 * Mc2 * Mt) / ((Mb + Mc) * Sqq),
           (-32 * Mb2 * Mt * Pw2) / ((Mb + Mc) * Sqq),
           (-32 * Mb2 * Mt * Pw2) / ((Mb + Mc) * Sqq),
           (-32 * Mb2 * Mt * Pw2) / ((Mb + Mc) * Sqq),
           (128 * Mb2 * Pw2 * (2 * Mt2 + Sqq)) / (3. * Sqq2),
           (-8 * (Mb - Mc) * MbplMc2 * Mt) / Sqq,
           (8 * (Mb - Mc) * MbplMc2 * Mt) / Sqq,
           (-8 * (Mb - Mc) * MbplMc2 * Mt) / Sqq,
           (32 * (2 * Mt2 + Sqq) * ((2 * Mc2 - Sqq) * Sqq + 2 * Mb2 * (2 * Pw2 + Sqq))) / (3. * Sqq2),
           (-128 * Mb2 * Mc2 * Mt) / ((Mb + Mc) * Sqq),
           (128 * Mb2 * Mc2 * Mt) / ((Mb + Mc) * Sqq),
           (-128 * Mb2 * Mc2 * Mt) / ((Mb + Mc) * Sqq),
           (256 * Mb2 * Mc2 * (2 * Mt2 + Sqq)) / (3. * MbplMc2 * Sqq),
           (-32 * Mb2 * Mt * Pw2) / ((Mb + Mc) * Sqq),
           (-32 * Mb2 * Mt * Pw2) / ((Mb + Mc) * Sqq),
           (128 * Mb2 * Pw2 * (2 * Mt2 + Sqq)) / (3. * Sqq2),
           (-8 * (Mb - Mc) * MbplMc2 * Mt) / Sqq,
           (8 * (Mb - Mc) * MbplMc2 * Mt) / Sqq,
           (32 * (2 * Mt2 + Sqq) * ((2 * Mc2 - Sqq) * Sqq + 2 * Mb2 * (2 * Pw2 + Sqq))) / (3. * Sqq2),
           (-128 * Mb2 * Mc2 * Mt) / ((Mb + Mc) * Sqq),
           (128 * Mb2 * Mc2 * Mt) / ((Mb + Mc) * Sqq),
           (256 * Mb2 * Mc2 * (2 * Mt2 + Sqq)) / (3. * MbplMc2 * Sqq)]

    outterm = (GF ** 2 * Pw * (Mt2 - Sqq) ** 2) / (64. * Mb2 * pi ** 3 * Sqq)

    return outterm, res


def getDiffRatedq2(Mb, Mr, Mt, q2, WCs, FFs):
    NPFF = NPFFTensor(WCs, FFs)
    outterm, RTen = rateTensor(Mb, Mr, Mt, q2)

    return outterm * dot(NPFF, RTen)


# Example
WCs = [1.,
       -0.2 - 0.1 * 1j,
       -0.5 + 0.7 * 1j,
       0.7,
       0.4 + 0.1 * 1j,
       0.1,
       -0.3, 0.3,
       0.2 + 0.3 * 1j,
       0.3 - 0.4 * 1j,
       -0.5]
FFs = [0.8, 0.9, 1.0, 0.3, 0.3, 1.1, 0.4, 0.42]

print(getDiffRatedq2(5279.32, 775.26, 1776.86, 3000 ** 2, WCs, FFs))

WCs = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
print(getDiffRatedq2(5279.32, 775.26, 0, 1e-7, WCs, FFs))
